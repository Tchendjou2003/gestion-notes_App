"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # Pour définir la durée de vie des jetons
import os # Pour accéder aux variables d'environnement (bonne pratique pour les clés secrètes)
# Importer les variables d'environnement
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Importer les variables d'environnement
load_dotenv(dotenv_path=BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
     'rest_framework',                  # Django REST Framework pour construire l'API
    'rest_framework_simplejwt',        # Pour l'authentification par jetons JWT
    'corsheaders',                     # Pour gérer les requêtes cross-origin (CORS)
    'user',  # Application personnalisée pour la gestion des utilisateurs
                             
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', # Moteur de base de données PostgreSQL
         'NAME': os.getenv('DB_NAME'),  # Nom de la base de données que vous avez créée
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),  # Port de la base de données (par défaut 5432 pour PostgreSQL)
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Africa/Douala'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8080",    # Pour le développement Flutter Web
    "http://127.0.0.1:8080",    # Autre adresse pour le développement Flutter Web
    # "http://localhost:XXXX",  # Ajoutez d'autres ports si nécessaire pour Flutter
    # "https://votre_domaine_flutter.com", # Si votre frontend est déployé
]
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication', # Utilise JWT pour l'authentification par défaut
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated', # Par défaut, toutes les API nécessitent une authentification
    )
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Le jeton d'accès expire après 60 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Le jeton de rafraîchissement expire après 1 jour
    'ROTATE_REFRESH_TOKENS': True,                  # Un nouveau jeton de rafraîchissement est émis à chaque rafraîchissement
    'BLACKLIST_AFTER_ROTATION': True,               # L'ancien jeton de rafraîchissement est mis sur liste noire

    'ALGORITHM': 'HS256', # Algorithme de signature des jetons
    # CLÉ SECRÈTE : TRÈS IMPORTANT !
    # En production, utilisez une variable d'environnement (os.environ.get('DJANGO_SECRET_KEY')).
    # Pour le développement, générez-en une forte une seule fois (ex: import secrets; print(secrets.token_urlsafe(50)))
    'SIGNING_KEY': os.environ.get('DJANGO_SECRET_KEY', 'votre_cle_secrete_django_TRES_LONGUE_ET_UNIQUE_ET_ALEATOIRE_12345'),
    'AUTH_HEADER_TYPES': ('Bearer',), # Le jeton sera envoyé dans l'en-tête "Authorization: Bearer <votre_jeton>"
    'USER_ID_FIELD': 'id', # Champ utilisé pour identifier l'utilisateur dans le jeton
    'USER_ID_CLAIM': 'user_id', # Nom du champ dans le payload du jeton JWT
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',

}